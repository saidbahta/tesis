#!/bin/sh
# Author 	: said d. bahta
# License	: open source 
# Date		: oct 21 2017
# This is a daemon script that will function as an IPS system for snort 
# the script has been tested in slackware linux and run well for the purpose
# it has some function like ipsSystem() which is to run the IPS system 
# or other command like setupDaemon(), startDaemon(), stopDaemon(), resetSystem(), 
# statusDaemon(), restartDaemon(), checkDaemon(), and some other function 
# for daemon purpose.  

daemonName="$0"

pidDir="/var/run"
pidFile="$pidDir/$daemonName.pid"
pidFile="$daemonName.pid"
SNORT_LOG_DIR="/var/log/snort/"
BOMA_LOG_DIR="/var/log/snort/boma"
BOMA_RULES="/var/log/snort/boma/ips-rule.sh"

myPid=`echo $$`


logDir="/var/log/snort/boma"
# To use a dated log file.
# logFile="$logDir/$daemonName-"`date +"%Y-%m-%d"`".log"
# To use a regular log file.
logFile="$logDir/$daemonName.log"

# Log maxsize in KB
logMaxSize=1024   	# 1mb

runInterval=60 		# In seconds


################################################################################
# Below are the function of the daemon.
################################################################################

setupDaemon() {
	# Make sure that the directories work.
	if [ ! -d "$pidDir" ]; then
		mkdir "$pidDir"
	fi
	if [ ! -d "$logDir" ]; then
		mkdir "$logDir"
	fi
	if [ ! -f "$logFile" ]; then
		touch "$logFile"
	else
		# Check to see if we need to rotate the logs.
		size=$((`ls -l "$logFile" | cut -d " " -f5`))
		if [[ $size -gt $logMaxSize ]]; then
			mv $logFile "$logFile.old"
			touch "$logFile"
		fi
	fi
	snort -i eth0 -de -D -c /etc/snort/snort.conf -A fast
}

checkDaemon() {
	# Check to see if the daemon is running.
	# This is a different function than statusDaemon
	# so that we can use it other functions.
	if [ -z "$oldPid" ]; then
		return 0
	elif [[ `ps aux | grep $oldPid | grep -v grep` > /dev/null ]]; then
		if [ -f "$pidFile" ]; then
			if [[ `cat $pidFile` = $oldPid ]]; then
				# Daemon is running.
				# echo 1
				return 1
			else
				# Daemon isn't running.
				return 0
			fi
		fi
	elif [[ `ps aux | grep $daemonName | grep -v grep | grep -v $myPid | grep -v "0:00"` > /dev/null ]]; then
		# Daemon is running but without the correct PID. Restart it.
		log '*** '`date +"%Y-%m-%d"`": $daemonName running with invalid PID; restarting."
		restartDaemon
		return 1
	else
		# Daemon not running.
		return 0
	fi
	return 1
}

log() {
	# Generic log function.
	echo "$1" >> "$logFile"
}

loop() {
	# This is the loop.
	now=`date +%s`
	if [ -z $last ]; then
		last=`date +%s`
	fi
	# Do everything you need the daemon to do.
	ipsSystem
	# Check to see how long we actually need to sleep for. If we want this to run
	# once a minute and it's taken more than a minute, then we should just run it
	# anyway.
	last=`date +%s`
	# Set the sleep interval
	if [[ ! $((now-last+runInterval+1)) -lt $((runInterval)) ]]; then
		sleep $((now-last+runInterval))
	fi
	# Startover
	loop
}

startDaemon() {
	# Start the daemon.
	setupDaemon # Make sure the directories are there.
	checkDaemon 
	status=$? 
	if [[ $status = 1 ]]; then
		echo " * \033[31;5;148mError\033[39m: $daemonName is already running."
		exit 1
	fi
	echo " * Starting $daemonName with PID: $myPid."
	echo "$myPid" > "$pidFile"
	log '*** '`date +"%Y-%m-%d"`": Starting up $daemonName."
	# Start the loop.
	loop
}

stopDaemon() {
	# Stop the daemon.
	checkDaemon 
	status=$? 
	if [[ $status -eq 0 ]]; then
		echo " * \033[31;5;148mError\033[39m: $daemonName is not running."
		exit 1
	fi
	echo " * Stopping $daemonName"
	log '*** '`date +"%Y-%m-%d"`": $daemonName stopped."
	if [[ ! -z `cat $pidFile` ]]; then
		kill -9 `cat $pidFile` &> /dev/null
	fi
}

resetSystem(){
echo "Reset iptables -F, rm alertF, ips-rules.sh and $pidFile"
iptables -F
if [ -f "$BOMA_LOG_DIR/alertF" ]; then 
	rm "$BOMA_LOG_DIR/alertF"; 
fi
if [ -f "$BOMA_RULES" ]; then 
	rm "$BOMA_RULES"; 
fi
if [ -f "$BOMA_LOG_DIR/alertF" ]; then 
	rm "$BOMA_LOG_DIR/alertF"; 
fi
if [ -f "$pidFile" ]; then 
	rm "$pidFile" && touch "$pidFile"; 
fi
for pid in $(ps aux | grep -E 'rc.boma |inotifywait |snort ' | grep -v grep | awk '{print $2}'); 
	do kill -9 $pid &> /dev/null ; 
done 
}

statusDaemon() {
	# Query and return whether the daemon is running.
	checkDaemon 
	status=$? 
	if [[ $status -eq 1 ]]; then
		echo " * $daemonName is running."
		cat $pidFile
		echo $oldPid 	
	else
		echo " * $daemonName isn't running."
	fi
}

restartDaemon() {
	# Restart the daemon.
	checkDaemon 
	status=$? 
	if [[ $status = 0 ]]; then
		# Can't restart it if it isn't running.
		echo "$daemonName isn't running."
		exit 1
	fi
	stopDaemon
	startDaemon
}

ipsSystem() {
	# Make direktory boma
	if [ ! -d "$BOMA_LOG_DIR" ]; then 
		mkdir -p "$BOMA_LOG_DIR"; 
	fi

	# Create ips-rule.sh 
	if [ ! -f "$BOMA_RULES" ]; then 
		touch "$BOMA_RULES"; 
	fi

	# Wait for change in alert file, then create alertF (alert_filter) file  
	inotifywait -q -m -e modify "$SNORT_LOG_DIR/alert" | 
	while read events; 
	do sed -r 's/^.*} (([0-9]{1,3}\.){3}[0-9]{1,3}).*/\1/' "$SNORT_LOG_DIR/alert" | uniq -c > "$BOMA_LOG_DIR/alertF";
		ALERT_FILTER=$(wc -l $BOMA_LOG_DIR/alertF | awk '{print $1}')
		IPS_RULE=$(wc -l $BOMA_LOG_DIR/ips-rule.sh | awk '{print $1}')
		# Compare alertF and ips-rule.sh so that the ips-rules.sh only run when there is a new kind of rule
		if [ "$ALERT_FILTER" == "$IPS_RULE" ]; then  
			continue 
		else  
			cat "$BOMA_LOG_DIR/alertF" | awk '{print "iptables -I INPUT -s "$2" -j DROP"}' > "$BOMA_LOG_DIR/ips-rule.sh"
			chmod +x "$BOMA_LOG_DIR/ips-rule.sh"
			"$BOMA_LOG_DIR/ips-rule.sh"
		fi
	done
	echo "$0 system is running >>>>"
}


################################################################################
# Parse the command.
################################################################################

if [ -f "$pidFile" ]; then
	oldPid=`cat $pidFile`
fi
checkDaemon
case "$1" in
	start)
		startDaemon
		;;
	stop)
		stopDaemon
		;;
	status)
		statusDaemon
		;;
	restart)
		restartDaemon
		;;
	reset)
		resetSystem
		;;
	*)
		echo "\033[31;5;148mError\033[39m: usage $0 { start | stop | reset | restart | status }"
		exit 1
esac

exit 0
